{"version":3,"sources":["images/voice.svg","components/BrowserCompatibility/BrowserCompatibility.js","components/Heading/Heading.js","components/Description/Description.js","components/Controls/ControlButtons/ControlButtons.js","components/Loader/Loader.js","components/Controls/Note/Note.js","components/ErrorDescription/ErrorDescription.js","components/Controls/Controls.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BrowserCompatibility","props","react_default","a","createElement","className","Heading","heading","Description","description","ControlButtons","onClick","event","startRecognition","disabled","disableStart","pauseRecognition","disablePause","Loader","Note","src","GoogleVoiceIcon","alt","style","width","height","components_Loader_Loader","rows","name","placeholder","value","speechText","ErrorDescription","setError","Controls","browserSpecificRecognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","_useState","useState","recognition","Object","slicedToArray","_useState3","_useState4","setDisableStart","_useState5","_useState6","setDisablePause","_useState7","_useState8","error","_useState9","_useState10","setSpeechText","preventDefault","lang","continuous","start","onresult","resultsLength","results","length","i","resultIndex","transcript","concat","onerror","Controls_Note_Note","Controls_ControlButtons_ControlButtons","stop","components_ErrorDescription_ErrorDescription","setNull","Layout","components_Heading_Heading","components_Description_Description","components_Controls_Controls","App","isBrowserNotCompatible","hasOwnProperty","components_BrowserCompatibility_BrowserCompatibility","components_Layout_Layout","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc23af76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/voice.36487195.svg\";","import React from 'react';\n\nconst BrowserCompatibility = (props) => {\n    return (\n        <div className=\"alert alert-danger text-center col-md-6 offset-3 mt-5\">\n            <h3 className>It looks like your browser doesn't support speech recognition.</h3>\n        </div>\n    );\n};\n\nexport default BrowserCompatibility;\n","import React from 'react';\n\nconst Heading = (props) => {\n    return (\n        <h1 className=\"mt-1\">{props.heading}</h1>\n    );\n};\n\nexport default Heading;\n","import React from 'react';\n\nconst Description = (props) => {\n    return (\n        <div className=\"description\">{props.description}</div>\n    );\n};\n\nexport default Description;\n","import React from 'react';\n\nconst ControlButtons = (props) => {\n\treturn (\n\t\t<div className=\"control-buttons w-100 mt-3\">\n\t\t\t<button\n\t\t\t\tclassName=\"col-md-4 btn btn-md btn-info m-2\"\n\t\t\t\tonClick={(event) => props.startRecognition(event)}\n\t\t\t\tdisabled={props.disableStart}>\n\t\t\t\tStart Recognition\n            </button>\n\t\t\t<button\n\t\t\t\tclassName=\"col-md-4 btn btn-md btn-info m-2\"\n\t\t\t\tonClick={(event) => props.pauseRecognition(event)}\n\t\t\t\tdisabled={props.disablePause}>\n\t\t\t\tPause Recognition\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default ControlButtons;\n","import React from 'react';\nimport './Loader.css';\n\nconst Loader = (props) => {\n    return (\n        <span className=\"loading-dots\">\n            <span className=\"dot\"></span>\n            <span className=\"dot\"></span>\n            <span className=\"dot\"></span>\n        </span>\n    );\n};\n\nexport default Loader;\n","import React from 'react';\nimport GoogleVoiceIcon from '../../../images/voice.svg';\nimport Loader from '../../Loader/Loader';\n\nconst Note = (props) => {\n    return (\n        <div className=\"note w-100\">\n            <h3>\n                Add Note\n                <span className=\"pl-1\">\n                    <img\n                        src={GoogleVoiceIcon}\n                        alt=\"Not available\"\n                        style={{ width: '30px', height: '20px' }}\n                        onClick={(event) => props.startRecognition(event)} />\n                    {/* Enable loader when recognition starts */}\n                    {props.disableStart && <Loader />}\n                </span>\n            </h3>\n            <textarea\n                rows=\"10\"\n                className=\"form-control mt-4\"\n                name=\"text\"\n                placeholder=\"Your voice enabled text here......\"\n                value={props.speechText} />\n        </div>\n    );\n};\n\nexport default Note;\n","import React from 'react';\n\nconst ErrorDescription = (props) => {\n    return (\n        <div className=\"errorDescription alert alert-danger mt-3\">\n            <div className=\"w-100 row\">\n                <div className=\"col-md-11\">Error occurred in recognition </div>\n                <div\n                    className=\"col-md-1 text-right\"\n                    onClick={() => props.setError(null)}>\n                    &#10007;\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ErrorDescription;\n","import React, { useState, useEffect } from 'react';\nimport ControlButtons from './ControlButtons/ControlButtons';\nimport Note from './Note/Note';\nimport ErrorDescription from '../ErrorDescription/ErrorDescription';\n\nconst Controls = (props) => {\n    const browserSpecificRecognition = new (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition)();\n    const [recognition] = useState(browserSpecificRecognition);\n    const [disableStart, setDisableStart] = useState(false);\n    const [disablePause, setDisablePause] = useState(false);\n    const [error, setError] = useState(null);\n    let [speechText, setSpeechText] = useState();\n\n    // useEffect(() => {\n    //     recognition.lang = 'en-IN';\n    //     recognition.continuous = true;\n    //     recognition.start();\n    // }, []);\n\n    const startRecognition = (event) => {\n        event.preventDefault();\n        recognition.lang = 'en-IN';\n        recognition.continuous = true;\n        // recognition.interimResults = true;\n        // recognition.maxAlternatives = 5;\n        setDisableStart(true);\n        disablePause && setDisablePause(false)\n        recognition.start();\n    };\n\n    recognition.onresult = (event) => {\n        const resultsLength = event.results.length;\n        for (let i = event.resultIndex; i < resultsLength; i++) {\n            const transcript = event.results[i][0].transcript;\n            speechText = speechText ? speechText.concat(transcript) : transcript;\n            setSpeechText(speechText);\n        }\n    };\n\n    recognition.onerror = (event) => {\n        setError(event.error);\n    };\n\n    const pauseRecognition = (event) => {\n        event.preventDefault();\n        setDisablePause(true);\n        disableStart && setDisableStart(false)\n        recognition.stop();\n    };\n\n    return (\n        <div className=\"controls mt-4\">\n            <form className=\"controls-form\">\n                <Note\n                    startRecognition={(event) => startRecognition(event)}\n                    disableStart={disableStart}\n                    speechText={speechText}\n                />\n\n                <ControlButtons\n                    startRecognition={(event) => startRecognition(event)}\n                    pauseRecognition={(event) => pauseRecognition(event)}\n                    disableStart={disableStart}\n                    disablePause={disablePause}\n                />\n                {error && <ErrorDescription setError={(setNull) => setError(setNull)} />}\n            </form>\n        </div>\n    );\n};\n\nexport default Controls;\n","\nimport React from 'react';\nimport Heading from '../Heading/Heading';\nimport Description from '../Description/Description';\nimport Controls from '../Controls/Controls';\n\nconst Layout = (props) => {\n    return (\n        <div className=\"layout col-md-10 offset-1 mt-5 text-center\">\n            <div className=\"message-controls col-md-6 offset-3\">\n                <Heading heading=\"Voice Controlled Notes App\" />\n                <Description description=\"A tiny app that allows you to take notes by recording your voice\" />\n                <Controls />\n            </div>\n        </div>\n    );\n};\n\nexport default Layout;\n","import React from 'react';\nimport BrowserCompatibility from './components/BrowserCompatibility/BrowserCompatibility';\nimport Layout from './components/Layout/Layout';\nimport './App.css';\n\nfunction App() {\n\tlet isBrowserNotCompatible = false;\n\n\tif (!window.hasOwnProperty('webkitSpeechRecognition')) {\n\t\tisBrowserNotCompatible = true;\n\t}\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t{isBrowserNotCompatible ? <BrowserCompatibility /> : <Layout />}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}